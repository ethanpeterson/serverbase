#
# Cookbook:: serverbase
# Spec:: ssl
#
# Copyright:: 2017, The Authors, All Rights Reserved.

# frozen_string_literal: true

require 'spec_helper'

describe 'serverbase::ssl' do
  before do
    Chef::Recipe.any_instance.stub(:search).and_return(
      [
        { # https://github.com/chefspec/chefspec#search OR https://github.com/chefspec/chefspec/issues/63#issuecomment-287801140
          'ssl_configuration' =>
          {
            'certificate' => '-----BEGIN RSA PRIVATE KEY-----DEK-Info: AES-256-CBC,5515FB95AAA068E7AB5124EDF3C6EF02-----END RSA PRIVATE KEY-----',
            'private_key' => '-----BEGIN RSA PRIVATE KEY-----5zA8c1j9T30Stq+JxoESDcWuIz701WVRaskKjGY0RIl7vKGhFKSzNw==-----END RSA PRIVATE KEY-----',
            'chain' => '-----BEGIN CERTIFICATE-----MIIGEzCCA/ugAwIBAgIQfVtRJrR2uhHbdBYLvFMNpzANBgkqhkiG9w0BAQwFADCB00u/I5sUKUErmgQfky3xxzlIPK1aEn8=-----END CERTIFICATE-----' \
            '-----BEGIN CERTIFICATE-----MIIFdzCCBF+gAwIBAgIQE+oocFv07O0MNmMJgGFDNjANBgkqhkiG9w0BAQwFADBv0fKtirOMxyHNwu8=-----END CERTIFICATE-----'
          }
        }
      ]
    )
    allow(File).to receive(:exist?).and_return(true) # https://github.com/chefspec/chefspec#ruby-code
  end

  let(:chef_run) do
    # for a complete list of available platforms and versions see:
    # https://github.com/customink/fauxhai/blob/master/PLATFORMS.md
    ChefSpec::ServerRunner.new(platform: 'ubuntu', version: '16.04') do |node|
      node.override['serverbase']['web']['ssl_cert_path'] = '/etc/ssl/mycert.com.crt'
      node.override['serverbase']['web']['ssl_CA_path'] = '/etc/ssl/mycert.CA.crt'
      node.override['serverbase']['web']['ssl_combined_cert_path'] = '/etc/ssl/mycert.CA.combined.crt'
      node.override['serverbase']['web']['ssl_cert_key_path'] = '/etc/ssl/mycert.com.key'
      node.override['nginx']['group'] = 'www-data'
      node.override['serverbase']['web']['ssl_dhparam'] = '-----BEGIN DH PARAMETERS-----<... generated by running "openssl dhparam -out dhparam4096.pem 4096" ...>-----END DH PARAMETERS-----'
      node.override['serverbase']['web']['ssl_dhparam_path'] = '/etc/ssl/dhparam.pem'
    end.converge(described_recipe)
  end

  it 'converges successfully' do
    expect { chef_run }.to_not raise_error
  end

  context 'When the ssl cert is created' do
    it 'it should create cert' do
      expect(chef_run).to create_file('/etc/ssl/mycert.com.crt').with(
        owner: 'root',
        group: 'www-data',
        mode: '740',
        content: '-----BEGIN RSA PRIVATE KEY-----DEK-Info: AES-256-CBC,5515FB95AAA068E7AB5124EDF3C6EF02-----END RSA PRIVATE KEY-----'
      )
    end
  end

  context 'When the ssl cert key file is created' do
    it 'it should exist' do
      expect(chef_run).to create_file('/etc/ssl/mycert.com.key').with(
        owner: 'root',
        group: 'www-data',
        mode: '740',
        content: '-----BEGIN RSA PRIVATE KEY-----5zA8c1j9T30Stq+JxoESDcWuIz701WVRaskKjGY0RIl7vKGhFKSzNw==-----END RSA PRIVATE KEY-----'
      )
    end
  end

  context 'When the certificate authority cert is created' do
    it 'it should exist' do
      expect(chef_run).to create_file('/etc/ssl/mycert.CA.crt').with(
        owner: 'root',
        group: 'www-data',
        mode: '740',
        content: '-----BEGIN CERTIFICATE-----MIIGEzCCA/ugAwIBAgIQfVtRJrR2uhHbdBYLvFMNpzANBgkqhkiG9w0BAQwFADCB00u/I5sUKUErmgQfky3xxzlIPK1aEn8=-----END CERTIFICATE-----' \
        '-----BEGIN CERTIFICATE-----MIIFdzCCBF+gAwIBAgIQE+oocFv07O0MNmMJgGFDNjANBgkqhkiG9w0BAQwFADBv0fKtirOMxyHNwu8=-----END CERTIFICATE-----'
      )
    end
  end

  context 'When the diffie-hellman key file is created' do
    it 'it should exist' do
      expect(chef_run).to create_file('/etc/ssl/dhparam.pem').with(
        owner: 'root',
        group: 'www-data',
        mode: '740',
        content: '-----BEGIN DH PARAMETERS-----<... generated by running "openssl dhparam -out dhparam4096.pem 4096" ...>-----END DH PARAMETERS-----'
      )
    end
  end

  context 'When the ssl chain of trust cert file is created' do
    it 'it should exist' do
      expect(chef_run).to run_execute('concat_certs').with(
        cwd: '/etc/ssl/',
        command: "bash -c 'cat /etc/ssl/mycert.com.crt <(echo) /etc/ssl/mycert.CA.crt > /etc/ssl/mycert.CA.combined.crt'"
      )
    end
  end
end
